#Regular Expressions
. it matches any single character except a newline.
* it matches zero or more existences of the immediate character preceding it.
[ character(s) ] it matches any one of the characters specified in character(s), one can also use a hyphen (-) to mean a range of characters such as [a-f], [1-5], and so on.
^ it matches the beginning of a line in a file.
$ matches the end of line in a file.
\ it is an escape character.
[0-9] = means a single number
[a-z] = means a single lower case letter
[A-Z]  means a single upper case letter
[a-zA-Z] = means a single letter
[a-zA-Z 0-9] = means a single letter or number
^sometext = lines starting with sometext
sometext$ = lines ending with sometext
[abd] = look for a b or d.
e\{2\} = match exactly two of 'e'
e\{1,3\} = match between 1 and 3 of the character '3'
colou?r = match 0 or 1 of the previous character so it will match 'color' or 'colour'
ca*t = match 0 or infinite amount of the character 'a'.

#Escaped Characters
\n = newline
\r = return
\t = tab
\v = vertical tab
\b = backspace
\a = alert
\\ = backslash
\' = single quote
\" = double quote

#AWK Guide

#AWK Options
-F"," = field column delimiter is equal to a comma. 
FS="," same as above in variable. FS is a special variable for awk
OFS="," = output field separator is set to a comma meaning field will be separated by a comma when output to the screen
-v val=$x = pass a variable to the awk command
val=$x  = use at end of awk command to state a variable
'NR==1" = numbered row

#AWK Examples
awk 'script' filename
awk '/pattern/action' filename
awk '!/pattern/{print}' filename = print line that doesnt contain the pattern
awk '{print $1}' filename = print only column 1 or whatever column number is after the dollar sign.
awk '/dog/{print $1}' filename = print only the first column of the line that contains dog.
awk -v q="'" '{print q $0 q}' file  = print every line in single quotes
awk '$1/cat/' test = will print the full line that contains 'cat' in the first column
awk '$1=="cat"' test = same as above
awk '$1 == "Medicine"{print $2}' file = will print only the second column of the line that has Medicine in the first column
awk '!/Medicine/' file = print the lines that dont contain medicine
awk -F, '$1 !~ /Medicine/' file = negate the pattern on the first column alone.
awk 'NR==1 && /Medicine/' file = print medicine record only if it is the 1st record.
awk -F, '/Medicine/ && $2>500' file = print all medicine records whose amount in the second column is greater than 500.

# SED Guide

#SED Format Explanation
sed [options] commands [file-to-edit]
sed '' file = this will print whatever is in the file since sed by default prints every line unless otherwise stated.
sed 'p' file = will print each line twice back to back since p says to print within single quotes.
sed 's/day/night/' oldfile>newfile
s/ = substitute followed by the delimiter that is '/'
day/ = original word followed by the delimiter
night = word to replace the original word followed by the delimiter
oldfile = file that contains the old word day
newfile = the new file that will be created that will change the old pattern 'day' to the new pattern 'night'
/ = is the delimiter seperating different parts of the SED command. The delimiter can be anything you want. It can be an underscore, colon, semi-colon, etc. It's best to use a delimiter that isn't contained within the command so that it doesnt have to be used with an escape character.
Example: sed 's/\/usr\/local\/bin/\/common\/bin/' <old >new
Instead use: sed 's:/usr/local/bin:/common/bin:' <old >new
sed -n '1p' newfile = print the first line of the file.
sed -n '1,5p' file = print the first 5 lines of the file
sed '1~2d' file = will delete every other line starting with line 1, this doesnt affect the original file as SED only affects the stream output if you want to make effect to files send it to a new file.
sed -i '1~2d' everyother.txt = will affect the original file because of the -i option
sed -n 's/on/forward/2p' file = the 'p' after /2 will print the lines where a substitution took place.

#SED Options/Comamnds
-n = means to negate the default print option with sed
-i = means to edit in-place or edit the original file instead of just the stream output.
s/ = substitute the first match on the line then move to the next line.
/g = use g after the last delimiter in a substitution set to tell sed to replace every instance of the pattern.
/3 - use a number after the last delimiter to tell sed to replace the third instance of the pattern on the line.
-i.bak = will create a backup file and then edit the regular file in-place
'1,5p' = print lines 1-5
'1,+4p' = print line 1 and the next 4.
'1~2p' = print every other line starting with line 1
'1~2d' = with delete every other line starting with line 1
